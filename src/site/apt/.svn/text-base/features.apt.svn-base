             ---------------------------------------------------
               Siddhi CEP - The Complex Event Processing Engine
             ---------------------------------------------------


Features Supported

  

	* Filter

		** Uses stream handlers to filter events

		** Supports Custom filters via the pluggable architecture

	* Join

		** Joins two streams at a time

		** Joining operation triggering can be configured (making "left" and/or "right" stream to start the join process on event arrival and expiry)

	* Aggregation

		** By default shipped with Avg, Sum , Min, Max, Count

		** Supports Custom Aggregations via the pluggable architecture

	* Group by

		** Group results based on one or more attributes

		** Supported for all type of queries

	* Having

		** Supported for all type of queries

	* Window

		** Default implementations to windows are: Time window, Time Batch window, Length window

		** Supports Custom windows via the pluggable architecture

	* Conditions and Expressions

		** Conditions supported are: and, or, not, true/false, ==, !=, >, >=, <, <=

		** Expressions supported are: boolean, string, int, long, float, double

		** special "within" Condition can be used with join, pattern and sequence

	* Pattern processing

		** Identifies pattern occurrences within streams

		** Supports "every" condition

		** Can process two stream at a time via "and" and "or" conditions (currently only works on two simple streams)

		** Can collect events with min and max limit, using "collect" condition (currently only works on a simple stream)

	* Sequence processing

		** Identifies continuous event sequences within streams

		** Supports "or" conditions on streams (currently only works on two simple streams)

		** Supports zero to many, one to many, and zero to one (currently only works on a simple stream)

	* Query Language

		** Supports Queries and Stream Definitions

		** Implemented using Antlr

		** Supports runtime query compilation

	* Snapshot State Persistence

		** Supports periodic snapshots that can store all state information and windows to a persistence store

		** Different persistence stores (e.g. Cassandra) can be plugged to store Snapshots

	* Distributed Caching

		** Uses Hazelcast in-memory distributed cache for storing events and states in the distributed mode

        ** Provides single Siddhi node and multiple Siddhi node modes

	* Sync and Async mode of processing

		** Synchronous mode provides very low latency since its its single thread

		** Asynchronous uses a pub sub approach

	* Runtime Query update

		** Supports query addition and removal at runtime